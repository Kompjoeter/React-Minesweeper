{"version":3,"sources":["components/Cell.js","utility.js","components/Field.js","components/Menu.js","components/Message.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","mouseDownEvent","bind","this","isRevealed","isMine","isExploded","neighbours","isFlagged","event","button","onLeftClick","onRightClick","revealed","className","filter","c","join","onMouseDown","onContextMenu","e","preventDefault","getValue","React","Component","floorRand","range","Math","floor","random","iterizeNestedArrayDoThingIf","nestedArray","callback","rows","length","cols","y","x","getNeighboursOfNestedArrayIndex","height","width","yy","xx","push","Field","state","field","generateField","cellCount","cells","handleLeftClick","handleRightClick","setState","onGameOver","initializeField","plantMinesField","countNeighboursField","console","log","initializeNestedArray","corX","corY","isEmpty","condition","value","count","populateNestedArray","target","mines","mineCount","forEach","neighbour","cell","incr","flagCount","flags","onFlag","onCellRevealed","incrementFlag","incrementCells","checkCell","revealCell","flagCell","gameOver","fieldData","updateCellOfField","revealNeighbours","revealMines","updateState","prevProps","pendingNewGame","newGame","afterNewGame","divStyle","gridTemplateColumns","gridTemplateRows","style","map","innerArray","item","key","String","Menu","buttonClickEvent","onButtonClick","onClick","Message","split","i","index","href","Game","difficultySettings","difficulty","handleButtonClick","handleFlagging","handleResetPendingNewGame","handleGameOver","handleReveal","d","changeDifficulty","setPendingNewGame","gameState","maxWidth","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d62e616.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nclass Cell extends React.Component\r\n{\r\n    constructor(props) \r\n    {\r\n      super(props);\r\n      this.mouseDownEvent = this.mouseDownEvent.bind(this);\r\n    };\r\n\r\n    getValue ()\r\n    {\r\n      if (!this.props.isRevealed) \r\n      {\r\n        return this.props.isFlagged ? \"🚩\" : null;\r\n      }\r\n      if (this.props.isMine)\r\n      {\r\n        if(this.props.isExploded)\r\n        {\r\n          return '💥';\r\n        }\r\n        return '💣';\r\n      }\r\n      if (this.props.neighbours == 0) {\r\n        return null;\r\n      }\r\n      return this.props.neighbours;\r\n    }\r\n\r\n    mouseDownEvent (event)\r\n    {\r\n      switch(event.button)\r\n      {\r\n        case 0:\r\n          this.props.onLeftClick(this.props);\r\n          break;\r\n        case 2: \r\n          this.props.onRightClick(this.props);\r\n          break;\r\n      }\r\n    }\r\n\r\n    render() \r\n    {\r\n        const cell = true;\r\n        const revealed = this.props.isRevealed;\r\n  \r\n        return (\r\n            <div className={[cell && 'Cell', revealed && 'revealed']\r\n            .filter(c => c != false)\r\n            .join(' ')}\r\n            onMouseDown={this.mouseDownEvent}\r\n            onContextMenu={(e)=> e.preventDefault()}>\r\n                {this.getValue()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n  \r\nexport default Cell;","export function initializeNestedArray(width, height, callback) \r\n{\r\n    let nestedArray = [];\r\n    for (var y = 0; y < height; y++) \r\n    {\r\n        nestedArray.push([]);\r\n        for (var x = 0; x < width; x++) \r\n        {\r\n            nestedArray[y][x] = callback(x,y);\r\n        }\r\n        \r\n    }\r\n    return nestedArray;\r\n}\r\n\r\nexport function populateNestedArray(nestedArray,condition,value,count) \r\n{\r\n  let rows = nestedArray.length;\r\n  let cols = nestedArray[0].length;\r\n  while (count) {\r\n    let y = floorRand(rows);\r\n    let x = floorRand(cols);\r\n    if (!condition(nestedArray[y][x])) {\r\n      nestedArray[y][x] = value(nestedArray[y][x]);\r\n      count--;\r\n    }\r\n  }\r\n  return nestedArray;\r\n}\r\n\r\nfunction floorRand(range) \r\n{\r\n  return Math.floor(Math.random() * range);\r\n}\r\n\r\nexport function iterizeNestedArrayDoThingIf(nestedArray,callback)\r\n{\r\n  let rows = nestedArray.length;\r\n  let cols = nestedArray[0].length;\r\n  for(let y = 0; y < rows; y++)\r\n  {\r\n    for(let x = 0; x < cols; x++)\r\n    {\r\n      nestedArray[y][x] = callback(nestedArray,x,y);\r\n    }\r\n  }\r\n  return nestedArray;\r\n}\r\n\r\nexport function getNeighboursOfNestedArrayIndex(nestedArray,x,y) \r\n{\r\n  let height  = nestedArray.length;\r\n  let width = nestedArray[0].length;\r\n  let neighbours = [];\r\n  \r\n  for (let yy = y-1; yy <= y+1; yy++) \r\n  {\r\n    for (let xx = x-1; xx <= x+1; xx++) \r\n    {\r\n      //Skip original cell\r\n      if (xx == x && yy == y) continue;\r\n\r\n      //Skip if out of bounds\r\n      if (xx < 0 || xx > width-1 || yy < 0 || yy > height-1) continue;\r\n\r\n      //Add neighbor cell\r\n      neighbours.push(nestedArray[yy][xx]);\r\n    }\r\n  }\r\n  return neighbours;\r\n}","import React from 'react';\r\nimport Cell from './Cell';\r\nimport {\r\n    initializeNestedArray, \r\n    populateNestedArray,\r\n    getNeighboursOfNestedArrayIndex,\r\n    iterizeNestedArrayDoThingIf\r\n} from '../utility';\r\nimport '../App.css';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass Field extends React.Component\r\n{\r\n\r\n    constructor(props) \r\n    {\r\n        super(props);\r\n        this.state = \r\n        {  \r\n            field: this.generateField(),\r\n        }\r\n        this.cellCount = this.props.cells;\r\n        this.handleLeftClick = this.handleLeftClick.bind(this);\r\n        this.handleRightClick = this.handleRightClick.bind(this);\r\n    }\r\n\r\n    newGame()\r\n    {\r\n        this.setState((state) => \r\n        {\r\n            return state.field = this.generateField();\r\n        });\r\n        this.cellCount = this.props.cells;\r\n        this.props.onGameOver();\r\n    }\r\n\r\n    generateField()\r\n    {\r\n        let field = this.initializeField();\r\n        field = this.plantMinesField(field);\r\n        return this.countNeighboursField(field);\r\n    }\r\n\r\n    initializeField()\r\n    {\r\n        console.log('🌱🔲 initializeField()');\r\n        return initializeNestedArray(\r\n            this.props.width,\r\n            this.props.height, \r\n            (x, y) =>\r\n            (\r\n                //Properties for each cell (Index of Nested Array)\r\n                {\r\n                    corX: x,\r\n                    corY: y,\r\n                    isMine: false,\r\n                    isExploded: false,\r\n                    isRevealed: false,\r\n                    isEmpty: false,\r\n                    isFlagged: false,\r\n                    neighbours: 0\r\n                }\r\n            )\r\n        )\r\n    }\r\n\r\n    plantMinesField(field)\r\n    {\r\n        console.log('💣🔲 populateField()');\r\n        return populateNestedArray(\r\n            field,\r\n            //Condition()\r\n            (target) => target.isMine,\r\n            //Value()\r\n            (target) => \r\n            {\r\n                target.isMine = true;\r\n                return target;\r\n            },\r\n            //Populate-Amount\r\n            this.props.mines\r\n        );\r\n    }\r\n\r\n    countNeighboursField(field)\r\n    {\r\n        console.log('🏠🔲 countNeighboursField()');\r\n        return iterizeNestedArrayDoThingIf(\r\n            field,\r\n            (nestedArray,x,y) =>\r\n            {\r\n                let mineCount = 0;\r\n                let neighbours = getNeighboursOfNestedArrayIndex(nestedArray,x,y);\r\n                \r\n                neighbours.forEach(neighbour => {if(neighbour.isMine){mineCount++}});\r\n                nestedArray[y][x].neighbours = mineCount;\r\n\r\n                if (mineCount == 0 && !nestedArray[y][x].isMine)\r\n                {\r\n                    nestedArray[y][x].isEmpty = true;\r\n                }\r\n                return nestedArray[y][x];\r\n            });\r\n    }\r\n\r\n    updateState(field)\r\n    {\r\n        this.setState((state) => \r\n        {\r\n            return state.field = field;\r\n        });\r\n    }\r\n    \r\n    updateCellOfField(field,cell)\r\n    {   \r\n        field[cell.corY][cell.corX] = cell;\r\n        return field;\r\n    }\r\n\r\n    incrementFlag(incr)\r\n    {\r\n        let flagCount = this.props.flags;\r\n\r\n        if (incr > 0)\r\n        {\r\n            if (this.props.flags >= this.props.mines)\r\n            {\r\n                incr = 0;\r\n            }\r\n        }\r\n        else if (incr < 0)\r\n        {\r\n            if (this.props.flags < 1)\r\n            {\r\n                incr = 0;\r\n            }\r\n        }\r\n        flagCount += incr;\r\n        this.props.onFlag(flagCount);\r\n    }\r\n\r\n    incrementCells(cell)\r\n    {\r\n        if (!cell.isMine)\r\n        {\r\n            this.cellCount--;\r\n        }\r\n        if (this.cellCount <= 0)\r\n        {\r\n            this.props.onGameOver(2);\r\n        }\r\n        this.props.onCellRevealed(this.cellCount);\r\n    }\r\n\r\n    flagCell(field,cell)\r\n    {\r\n        if (!cell.isRevealed)\r\n        {\r\n            if (cell.isFlagged)\r\n            {\r\n                field[cell.corY][cell.corX].isFlagged = false;\r\n                this.incrementFlag(1);\r\n            }\r\n            else\r\n            {\r\n                if(this.props.flags > 0)\r\n                {\r\n                    field[cell.corY][cell.corX].isFlagged = true;\r\n                    this.incrementFlag(-1);\r\n                }\r\n            }\r\n        }\r\n        return field[cell.corY][cell.corX];\r\n    }\r\n    \r\n    revealCell(field,cell)\r\n    {\r\n        this.incrementCells(cell);\r\n        field[cell.corY][cell.corX].isRevealed = true;\r\n        return field[cell.corY][cell.corX];\r\n    }\r\n\r\n    revealNeighbours(field,cell)\r\n    {\r\n        let neighbours = getNeighboursOfNestedArrayIndex(this.state.field,cell.corX,cell.corY);\r\n    \r\n        neighbours.forEach(neighbour => \r\n        {  \r\n            if (!neighbour.isRevealed)\r\n            {\r\n                this.checkCell(neighbour);   \r\n            }\r\n        });\r\n\r\n        return field;\r\n    }\r\n\r\n    revealMines(field,cell)\r\n    {\r\n        console.log('💣 revealMines()')\r\n        \r\n        return iterizeNestedArrayDoThingIf(field,(nestedArray,x,y)=>\r\n        {\r\n            if (nestedArray[y][x].isMine)\r\n            {\r\n                if (x == cell.corX && y == cell.corY)\r\n                {\r\n                    nestedArray[y][x].isExploded = true;\r\n                }\r\n                nestedArray[y][x] = this.revealCell(field,nestedArray[y][x]);\r\n                nestedArray[y][x] = this.flagCell(field,nestedArray[y][x]);\r\n            }\r\n            return nestedArray[y][x];\r\n        })\r\n    }\r\n\r\n    checkCell(cell)\r\n    {\r\n        console.log('🔎 checkCell()');\r\n        if (!cell.isRevealed & !cell.isFlagged & !this.props.gameOver)\r\n        {\r\n            let fieldData = this.state.field;\r\n\r\n            if (cell.isEmpty)\r\n            {\r\n                cell = this.revealCell(fieldData,cell);\r\n                cell = this.flagCell(fieldData,cell);\r\n                fieldData = this.updateCellOfField(fieldData,cell);\r\n                fieldData = this.revealNeighbours(fieldData,cell);\r\n            }\r\n            else if (!cell.isEmpty && !cell.isMine)\r\n            {\r\n                cell = this.revealCell(fieldData,cell);\r\n                cell = this.flagCell(fieldData,cell);\r\n                fieldData = this.updateCellOfField(fieldData,cell);\r\n            }\r\n            else if (cell.isMine)\r\n            {\r\n                fieldData = this.revealMines(fieldData,cell);\r\n                this.props.onGameOver(1);\r\n            }\r\n            this.updateState(fieldData);\r\n        }   \r\n    }\r\n\r\n    handleLeftClick(cell)\r\n    {\r\n        this.checkCell(cell);\r\n    }\r\n\r\n    handleRightClick(cell)\r\n    {\r\n        if (!this.props.gameOver)\r\n        {\r\n            let fieldData = this.state.field;\r\n\r\n            cell = this.flagCell(fieldData,cell);\r\n            fieldData = this.updateCellOfField(fieldData,cell);\r\n\r\n            this.updateState(fieldData);\r\n        }\r\n    }\r\n\r\n    handleGameOver()\r\n    {\r\n        this.props.onGameOver();\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        if (this.props.pendingNewGame == true & prevProps.pendingNewGame == false)\r\n        {\r\n            this.newGame();\r\n            this.props.afterNewGame();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const divStyle = {\r\n            gridTemplateColumns: 'repeat('+this.props.width+',1fr)',\r\n            gridTemplateRows: 'repeat('+this.props.height+',1fr)'\r\n          };\r\n\r\n        return (\r\n            <div className=\"Field\" style={divStyle}>        \r\n                 {\r\n                    this.state.field.map(innerArray => innerArray.map(item => \r\n                    <Cell \r\n                        key={String('x'+item.corX+'y'+item.corY)}\r\n                        corX={item.corX}\r\n                        corY={item.corY}\r\n                        isMine={item.isMine}\r\n                        isExploded={item.isExploded}\r\n                        isRevealed={item.isRevealed}\r\n                        isEmpty={item.isEmpty}\r\n                        isFlagged={item.isFlagged}\r\n                        neighbours={item.neighbours}\r\n                        onLeftClick = {this.handleLeftClick}\r\n                        onRightClick = {this.handleRightClick}\r\n                    />))\r\n                }                    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Field;","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Menu(props) {\r\n\r\n    const buttonClickEvent = (event) =>\r\n    {\r\n        props.onButtonClick(event.target.value);\r\n    }\r\n\r\n    return (\r\n      <div className=\"Menu\">\r\n        <button className=\"menu-item\" value=\"0\" onClick={buttonClickEvent}>Easy</button>\r\n        <button className=\"menu-item\" value=\"1\" onClick={buttonClickEvent}>Medium</button>\r\n        <button className=\"menu-item\" value=\"2\" onClick={buttonClickEvent}>Hard</button>\r\n        <p className=\"menu-item\">{'🚩'+props.flags}</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Menu;\r\n  ","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Message(props) {\r\n\r\n    const message = [\r\n      \r\n    \"*Left-Click on a cell to reveal it.\\n*Right-Click on a cell to 'flag' (or 'unflag') it.\\n->\\n* A revealed cell can be empty, numbered, or a mine.\\n* A flagged cell can not be revealed.\\n* An empty cell has 0 adjacent cells that contain a mine.\\n* A numbered cell has X adjacent cells that contain a mine,where X is the number the cell displays.\\n->\\n* Reveal a mine and you lose the game.\\n* Reveal all cells, except for the cells that contain a mine and you win the game.\\n-\"\r\n    ,\"You lost! Press any difficulty to start a new game. Good luck!\\n-\",\"You won! Congratulations! 🎈🎈🎈\\n -\"]\r\n  //          <p>{props.gameOver ? \"You lost! Press any difficulty to start a new game. Good luck!\" : \"Playing\"}</p>\r\n    return (\r\n      <div className=\"Message\">\r\n        {message[props.gameOver].split('\\n').map((i,index) => {return <p key={index}>{i}</p>})}\r\n        <a href=\"https://github.com/RanDByyp\">Made by RanDByyp</a>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Message;\r\n  ","import React from 'react';\r\nimport Field from './Field';\r\nimport Menu from './Menu';\r\nimport Message from './Message';\r\nimport '../App.css';\r\n\r\nclass Game extends React.Component\r\n{\r\n\r\n    constructor(props)\r\n    {   \r\n        super(props);\r\n\r\n        this.difficultySettings = \r\n        [\r\n            {height: 8, width: 8, mines: 10},\r\n            {height: 13,width: 15,mines: 40},\r\n            {height: 16,width: 30,mines: 99}\r\n        ];\r\n\r\n        this.state = {\r\n            pendingNewGame: false,\r\n            gameOver: 0,\r\n            difficulty: 0,\r\n            height: this.difficultySettings[0].height,\r\n            width: this.difficultySettings[0].width,\r\n            mines: this.difficultySettings[0].mines,\r\n            flags: this.difficultySettings[0].mines,\r\n            cells: (this.difficultySettings[0].height * this.difficultySettings[0].width) - this.difficultySettings[0].mines\r\n        };\r\n\r\n        this.handleButtonClick = this.handleButtonClick.bind(this);\r\n        this.handleFlagging = this.handleFlagging.bind(this);\r\n        this.handleResetPendingNewGame = this.handleResetPendingNewGame.bind(this);\r\n        this.handleGameOver = this.handleGameOver.bind(this);\r\n        this.handleReveal = this.handleReveal.bind(this);\r\n    }\r\n\r\n    changeDifficulty(d)\r\n    {\r\n        this.setState(\r\n        { \r\n            difficulty: d,\r\n            height: this.difficultySettings[d].height,\r\n            width: this.difficultySettings[d].width,\r\n            mines: this.difficultySettings[d].mines,\r\n            flags: this.difficultySettings[d].mines,\r\n            cells: (this.difficultySettings[d].height * this.difficultySettings[d].width) - this.difficultySettings[d].mines\r\n        });\r\n    }\r\n\r\n    setPendingNewGame()\r\n    {\r\n        this.setState((state) => \r\n        {\r\n            return state.pendingNewGame = true;\r\n        });\r\n    }\r\n\r\n    handleResetPendingNewGame()\r\n    {\r\n        this.setState((state) => \r\n        {\r\n            return state.pendingNewGame = false;\r\n        });\r\n\r\n        this.setState((state) =>\r\n        {\r\n            return state.gameOver = 0;\r\n        });\r\n    }\r\n    \r\n    handleButtonClick(difficulty)\r\n    {\r\n        this.changeDifficulty(difficulty);\r\n        this.setPendingNewGame();\r\n    }\r\n\r\n    handleFlagging(flags)\r\n    {\r\n        this.setState((state) => \r\n        {\r\n            return state.flags = flags;\r\n        });\r\n    }\r\n\r\n    handleGameOver(gameState)\r\n    {\r\n        this.setState((state) =>\r\n        {\r\n            return state.gameOver = gameState;\r\n        });\r\n    }\r\n\r\n    handleReveal(cells)\r\n    {\r\n        this.setState((state) =>\r\n        {\r\n            return state.cells = cells;\r\n        });\r\n    }\r\n\r\n    render() \r\n    {\r\n        const divStyle = { maxWidth: this.state.width+35+'px'\r\n            };\r\n\r\n        return (\r\n            <div className=\"Game\" style={divStyle}>\r\n                <div className=\"game-holder\">\r\n                    <Menu \r\n                        flags={this.state.flags}\r\n                        cells={this.state.cells}\r\n                        gameOver={this.gameOver}\r\n                        onButtonClick={this.handleButtonClick}\r\n                    />\r\n                    <Field\r\n                        width={this.state.width} \r\n                        height={this.state.height} \r\n                        mines={this.state.mines}\r\n                        flags={this.state.flags}\r\n                        cells={this.state.cells}\r\n                        gameOver={this.state.gameOver}\r\n                        pendingNewGame={this.state.pendingNewGame}\r\n                        afterNewGame={this.handleResetPendingNewGame}\r\n                        onGameOver={this.handleGameOver}\r\n                        onFlag={this.handleFlagging}\r\n                        onCellRevealed={this.handleReveal}\r\n                    />\r\n                    <Message gameOver={this.state.gameOver}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from './components/Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}